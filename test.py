from eval import expr_to_str, frontend, eval_expr

if __name__ == "__main__":
    tests = [r'(+ 1 (+ 3 4) (- 1 2))',
             r'1',
             r'#t',
             r'(/ (+ 2 (* 2 3) (- 0 1) (+ 1 3 4)) (+ 2 3))',
             r'(+ 1 2 3)',
             r'(- 0 1)',
             r'(* 3 4 5)',
             r'(/ 3 4)',
             r'(** 2 3)',
             r'(println (quote (1 2 4)))',
             r'(eq? 1 2)',
             r'(list 1 (+ 1 2) 3)',
             r'(quasiquote (list 3 (unquote (+ 2 3))))',
             r'(quasiquote (quasiquote (unquote (+ 2 3))))',
             r'"Hello"',
             r'(quasiquote (3 (unquote-splicing (list 3 4)) 5))',
             r'(if #t (+ 2 3) (- 0 1))',
             r'(let ((x 3) (x 4)) (+ x 2))',
             r'(let* ((x 3) (x 4)) (+ x 2))',
             r'(and #t #t #f #f #t)',
             r'(or #t #t #f #f #t)',
             r'(not #f)',
             r'(not #t)',
             r'(begin 2 (+ 2 3) (if #f (- 2 3) (+ 3 4)))',
             r'(^ "hello" "world")',
             r'(begin (let ((x 3) (x 4)) (+ x 2)) (set! x 5) x)',
             r'(begin (define x 3) x)',
             r'(begin (define (f x) x))',
             r'(lambda (x y) (+ x y))',
             r'((lambda (x y) (+ x y)) 2 3)',
             r'((lambda (x) (+ x 0)) 2)',
             r'(begin (define (f x) (* x x)) (f 3))',
             r'(cons 2 3)',
             r'(car (cons 2 3))',
             r'(cdr (cons 2 3))',
             r'(apply + 2 1 4 (quote (1 2)))',
             r'(map * (quote (1 2 3)) (quote (1 2 3)) (quote (1 2 3)))',
             r'(define-macro (when x y) (eq? x y))',
             r'(begin (define-macro (when x y) (eq? x y)) (when 3 4))',
             r'(neq? 1 2)',
             r'(neq? 0 0)',
             r'(lt? 0 0)',
             r'(gt? 1 0)',
             r'(lte? 0 1)',
             r'(gte? 2 3)',
             r'(cond (#t (+ 3 4)) (else 4))',
             r'(cond (#f (+ 3 4)) (else 4))',
             r'(for ((i (list 1 2 3)) (j (list 4 5 6))) (+ i j) (- i j))',
             r'(for/list ((i (list 1 2 3)) (j (list 4 5 6))) (+ i j) (- i j))',
             r'(delay (/ 1 0))',
             r'(force (delay (/ 2 1)))',
             r'(begin (define p (delay (/ 1 1))) (force p))',
             r'(begin (define (decr count) (if (eq? count 0) (println "Done") (begin (println count) (decr (- count 1))) )) (decr 3))',
             r'(cons-stream 2 3)',
             r'(cdr-stream (cons-stream 2 3))',
             r'(define my-list (lambda ((variadic x)) x))',
             r'(begin (define my-list (lambda ((variadic x)) x)) (my-list 2 3 4))',
             r'(list (quote (1 2)) (quote (3 4)))',
             r'(append (quote (1 2)) (quote (3 4)))',
             r'(append (quote ((1 2) (3 4))) (quote ((5 6) (7 8))))',
             r'(begin (define (f x (variadic y)) (append y (list x))) (f 1 2 3))',
             r'(begin (define f (lambda (x (variadic y)) (append y (list x)))) (f 1 2 3))',
             r'(define p (delay (begin (print "hi") (/ 1 0))))',
             r'nil',
             r'()',
             r'(match 3 (_ (+ 2 3) (- 0 4)) (_ (+ 2 4) (- 5 6)))',
             r'(begin (match 3 (i (+ 2 i))))',
             r'(begin (match 3 (3 (+ 2 4))))',
             r'(match nil (nil (+ 2 4)))',
             r'(match (cons 2 3) ((cons i j) (+ i j)))',
             r'(match (list 2 3 (+ 4 5)) ((list i j k) (+ i j k)))',
             r'(match (list 2 3 (list 6 7)) ((list i j k) (+ i j) k))',
             r'(match (list 2 3 (list 6 7)) ((list i j (list k l)) (+ i j k l)))',
             r'(match (list 1 (list 2 3) (list 4 5) (list 6 7)) ((list (list a b) (list c d) (list k l)) (+ a b c d k l)))',
             r'(match (list 1 (list 2 3) (list 4 5) (list 6 7)) ((list x (list a b) (list c d) (list k l)) (+ x a b c d k l)))',
             r'(match (cons (cons 3 (cons 3 6)) 3) ((cons (cons a (cons b c)) d) (+ a b c d)))',
             r'(match (cons (cons 3 (cons 3 6)) (list 2 3)) ((cons (cons a (cons b c)) d) (+ a b c) d))',
             r'(match (cons (cons 3 (cons 3 6)) (list 3 3)) ((cons (cons a (cons b c)) (list d e)) (+ a b c d e)))',
             r'""',
             r'"hello world"',
             r'(^ (^ "hello" " ") "world")',
             r'(quote (quote 3))',
             r'(quote (quote (quote (4 (quote 3)))))',
             r'(quasiquote (quasiquote 3))',
             r"'hello",
             r"'3",
             r"'#t",
             r"'(+ 3 2)",
             r"'(+ 3 '(+ 4 3))",
             r"'(+ '(+ 4 3) 3)",
             r"`3",
             r"''3",
             r"`3",
             r"`'3",
             r"``(+ 3 '2)",
             r"`(+ 3 ,(+ 2 3))",
             r"`(+ ,(- 2 3) ,(+ 2 3) ,1)",
             r"`,`(+ ,(- 2 3) ,(+ 2 3) ,1)",
             r"(+ `3 '3)",
             r"`(+ 3 @(list 3 (+ 2 3)))",
             r"'(+ 3 @(list 3 (+ 2 3)))",
             r"`(+ 3 @(list 3 '(+ 2 3)))"]
    for string in tests:
        context = {}
        print("-------------------")
        print(expr_to_str(frontend(string)))
        print(expr_to_str(eval_expr(frontend(string), context, False)))
